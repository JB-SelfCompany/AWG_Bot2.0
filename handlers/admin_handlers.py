import logging
import ipaddress
from datetime import datetime, timedelta
from typing import Optional
import json
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import Config
from database.database import get_db, Client
from services.awg_manager import AWGManager
from services.ip_service import IPService
from services.backup_service import BackupService
from services.settings_service import SettingsService
from keyboards.main_keyboards import *
from utils.qr_generator import generate_qr_code
from utils.vpn_converter import conf_to_vpn_url
from utils.formatters import format_client_info, format_client_config, format_traffic_size

admin_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
config = Config()
awg_manager = AWGManager(config)
ip_service = IPService(config)
backup_service = BackupService(config)
db = get_db()
settings_service = SettingsService()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_last_message = {}

class ClientStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    waiting_name = State()
    waiting_endpoint = State()
    waiting_custom_time = State()
    waiting_custom_time_value = State()
    waiting_client_search = State()
    waiting_ipv6_choice = State()

class EditClientStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    waiting_new_name = State()
    waiting_new_endpoint = State()
    waiting_new_traffic_limit = State()
    waiting_edit_time_value = State()
    waiting_edit_time_unit = State()

class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    waiting_dns = State()
    waiting_endpoint = State()

@admin_router.callback_query(F.data == "settings_menu")
async def show_settings_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    await edit_or_send_message(
        callback,
        "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        reply_markup=get_settings_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_show")
async def show_settings_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    dns = await settings_service.get_default_dns()
    endpoint = await settings_service.get_default_endpoint()
    
    endpoint_text = endpoint if endpoint else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è)"
    
    await edit_or_send_message(
        callback,
        f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üåê DNS —Å–µ—Ä–≤–µ—Ä—ã: {dns}\n"
        f"üì° Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {endpoint_text}",
        reply_markup=get_settings_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_dns")
async def start_dns_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É DNS"""
    current_dns = await settings_service.get_default_dns()
    
    await edit_or_send_message(
        callback,
        f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–µ DNS: {current_dns}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 1.1.1.1, 8.8.8.8",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
        ]])
    )
    await state.set_state(SettingsStates.waiting_dns)
    await callback.answer()

@admin_router.message(StateFilter(SettingsStates.waiting_dns))
async def process_dns_setup(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS"""
    dns_servers = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    if not settings_service.validate_dns_servers(dns_servers):
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ DNS —Å–µ—Ä–≤–µ—Ä—ã\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å–∞ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="settings_menu")
                    ]])
                )
            except:
                pass
        return
    
    success = await settings_service.set_default_dns(dns_servers)
    await state.clear()
    
    if success:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"‚úÖ DNS —Å–µ—Ä–≤–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                         f"–ù–æ–≤—ã–µ DNS: {dns_servers}\n\n"
                         f"–í—Å–µ –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ DNS —Å–µ—Ä–≤–µ—Ä—ã.",
                    reply_markup=get_settings_menu()
                )
            except:
                pass

@admin_router.callback_query(F.data == "settings_endpoint")
async def show_endpoint_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ endpoint"""
    current_endpoint = await settings_service.get_default_endpoint()
    endpoint_text = current_endpoint if current_endpoint else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await edit_or_send_message(
        callback,
        f"üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Endpoint\n\n"
        f"–¢–µ–∫—É—â–∏–π Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {endpoint_text}\n\n"
        f"–ï—Å–ª–∏ Endpoint —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è "
        f"–≤—Å–µ–º –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º. –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.",
        reply_markup=get_endpoint_settings_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "set_default_endpoint")
async def start_endpoint_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    current_endpoint = await settings_service.get_default_endpoint()
    
    endpoint_text = current_endpoint if current_endpoint else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await edit_or_send_message(
        callback,
        f"üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
        f"–¢–µ–∫—É—â–∏–π Endpoint: {endpoint_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ vpn.example.com\n"
        f"‚Ä¢ my-server.ru",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="settings_endpoint")
        ]])
    )
    await state.set_state(SettingsStates.waiting_endpoint)
    await callback.answer()

@admin_router.message(StateFilter(SettingsStates.waiting_endpoint))
async def process_endpoint_setup(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ endpoint"""
    endpoint = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    if not settings_service.validate_endpoint(endpoint):
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Endpoint\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω:\n"
                         "–ü—Ä–∏–º–µ—Ä—ã: 192.168.1.100, vpn.example.com",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="settings_endpoint")
                    ]])
                )
            except:
                pass
        return
    
    success = await settings_service.set_default_endpoint(endpoint)
    await state.clear()
    
    if success:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"‚úÖ Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                         f"–ù–æ–≤—ã–π Endpoint: {endpoint}\n\n"
                         f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                         f"—ç—Ç–æ—Ç Endpoint. –í–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
                    reply_markup=get_endpoint_settings_menu()
                )
            except:
                pass

@admin_router.callback_query(F.data == "clear_default_endpoint")
async def clear_endpoint_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    current_endpoint = await settings_service.get_default_endpoint()
    
    if not current_endpoint:
        await edit_or_send_message(
            callback,
            "üì° Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
            "–ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å.",
            reply_markup=get_endpoint_settings_menu()
        )
    else:
        await edit_or_send_message(
            callback,
            f"üì° –û—á–∏—Å—Ç–∫–∞ Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            f"–¢–µ–∫—É—â–∏–π Endpoint: {current_endpoint}\n\n"
            f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ "
            f"–≤–∞–º —Å–Ω–æ–≤–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å Endpoint –≤—Ä—É—á–Ω—É—é.\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", 
                    callback_data="confirm_clear_endpoint"
                )],
                [InlineKeyboardButton(
                    text="üîô –û—Ç–º–µ–Ω–∞", 
                    callback_data="settings_endpoint"
                )]
            ])
        )
    await callback.answer()

@admin_router.callback_query(F.data == "confirm_clear_endpoint")
async def confirm_clear_endpoint(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É endpoint"""
    success = await settings_service.set_default_endpoint("")
    
    if success:
        await edit_or_send_message(
            callback,
            "‚úÖ Endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—á–∏—â–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–∞–º —Å–Ω–æ–≤–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç "
            "–≤–≤–æ–¥–∏—Ç—å Endpoint –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_endpoint_settings_menu()
        )
    else:
        await edit_or_send_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Endpoint",
            reply_markup=get_endpoint_settings_menu()
        )
    await callback.answer()

async def update_client_traffic_usage(client: Client, stats: dict) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AWG"""
    if not stats:
        return
    
    transfer = stats.get('transfer', '0 B, 0 B')
    try:
        rx_str, tx_str = transfer.split(', ')
        
        def parse_traffic_size(size_str: str) -> int:
            size_str = size_str.strip()
            if 'received' in size_str:
                size_str = size_str.replace(' received', '')
            if 'sent' in size_str:
                size_str = size_str.replace(' sent', '')
            
            parts = size_str.split()
            if len(parts) != 2:
                return 0
            
            value = float(parts[0])
            unit = parts[1].upper()
            
            multipliers = {
                'B': 1,
                'KIB': 1024,
                'MIB': 1024**2,
                'GIB': 1024**3,
                'TIB': 1024**4,
                'KB': 1000,
                'MB': 1000**2,
                'GB': 1000**3,
                'TB': 1000**4
            }
            
            return int(value * multipliers.get(unit, 1))
        
        rx_bytes = parse_traffic_size(rx_str)
        tx_bytes = parse_traffic_size(tx_str)
        total_bytes = rx_bytes + tx_bytes
        
        if total_bytes != client.traffic_used:
            client.traffic_used = total_bytes
            await db.update_client(client)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")

async def edit_or_send_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    try:
        if callback.message:
            await callback.message.edit_text(text, reply_markup=reply_markup)
            user_last_message[user_id] = callback.message.message_id
        else:
            new_message = await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=text,
                reply_markup=reply_markup
            )
            user_last_message[user_id] = new_message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            new_message = await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=text,
                reply_markup=reply_markup
            )
            user_last_message[user_id] = new_message.message_id
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

async def edit_or_send_photo(callback: CallbackQuery, photo, caption: str = ""):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = callback.from_user.id
    
    try:
        if user_id in user_last_message:
            try:
                await callback.bot.delete_message(
                    chat_id=user_id,
                    message_id=user_last_message[user_id]
                )
            except:
                pass
        
        new_message = await callback.bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=caption
        )
        user_last_message[user_id] = new_message.message_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@admin_router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_last_message[message.from_user.id] = message.message_id
    
    await message.answer(
        "ü§ñ AmneziaWG Management Bot\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AmneziaWG —Å–µ—Ä–≤–µ—Ä–æ–º!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await edit_or_send_message(
        callback,
        "ü§ñ AmneziaWG Management Bot\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤
@admin_router.callback_query(F.data == "clients_menu")
async def show_clients_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    clients = await db.get_all_clients()
    active_count = len([c for c in clients if c.is_active and not c.is_blocked])
    blocked_count = len([c for c in clients if c.is_blocked])
    
    await edit_or_send_message(
        callback,
        f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n\n"
        f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
        f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_count}",
        reply_markup=get_clients_menu()
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - —à–∞–≥ 1: –≤–≤–æ–¥ –∏–º–µ–Ω–∏
@admin_router.callback_query(F.data == "add_client")
async def start_add_client(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_endpoint = await settings_service.get_default_endpoint()
    
    if default_endpoint:
        # –ï—Å–ª–∏ –µ—Å—Ç—å endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        await state.update_data(endpoint=default_endpoint)
        
        await edit_or_send_message(
            callback,
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            f"üì° Endpoint: {default_endpoint} (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
            ]])
        )
        await state.set_state(ClientStates.waiting_name)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç endpoint –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await edit_or_send_message(
            callback,
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
            ]])
        )
        await state.set_state(ClientStates.waiting_name)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@admin_router.message(StateFilter(ClientStates.waiting_name))
async def process_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    name = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    if not name or len(name) < 2 or len(name) > 32:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
                    ]])
                )
            except:
                pass
        return
    
    if not name.replace('-', '').replace('_', '').replace('.', '').isalnum():
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã - _ .\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
                    ]])
                )
            except:
                pass
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    existing_client = await db.get_client_by_name(name)
    if existing_client:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
                    ]])
                )
            except:
                pass
        return
    
    await state.update_data(name=name)
    
    state_data = await state.get_data()

    if config.ipv6_enabled and config.server_ipv6_subnet:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "–î–æ–±–∞–≤–∏—Ç—å IPv6?\n\n",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="ipv6yes")],
                        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ipv6no")],
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_addclient")]
                    ])
                )
            except Exception:
                pass
        await state.set_state(ClientStates.waiting_ipv6_choice)
        return

    if "endpoint" in state_data:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"<b>{name}</b>\nEndpoint: <code>{state_data['endpoint']}</code>",
                    reply_markup=get_time_limit_keyboard()
                )
            except Exception:
                pass
        return

    if user_id in user_last_message:
        try:
            await message.bot.edit_message_text(
                chat_id=user_id,
                message_id=user_last_message[user_id],
                text=f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                     f"‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ endpoint (IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_client")
                ]])
            )
        except:
            pass
    
    await state.set_state(ClientStates.waiting_endpoint)

@admin_router.callback_query(F.data.in_({"ipv6yes", "ipv6no"}), StateFilter(ClientStates.waiting_ipv6_choice))
async def process_ipv6_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ IPv6"""
    has_ipv6 = callback.data == "ipv6yes"
    await state.update_data(has_ipv6=has_ipv6)
    
    state_data = await state.get_data()
    name = state_data.get("name")
    
    # –ü–æ–ª—É—á–∞–µ–º endpoint –∏–∑ state_data
    endpoint = state_data.get("endpoint")
    
    # –ï—Å–ª–∏ endpoint —É–∂–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if endpoint:
        await edit_or_send_message(
            callback,
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            f"‚úÖ –ò–º—è: {name}\n"
            f"‚úÖ Endpoint: {endpoint}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:",
            reply_markup=get_time_limit_keyboard()
        )
    else:
        # –ù—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å endpoint
        await edit_or_send_message(
            callback,
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
            f"‚úÖ –ò–º—è: {name}\n"
            f"–í–≤–µ–¥–∏—Ç–µ Endpoint (IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_addclient")]
            ])
        )
        await state.set_state(ClientStates.waiting_endpoint)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ endpoint —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@admin_router.message(StateFilter(ClientStates.waiting_endpoint))
async def process_client_endpoint(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ endpoint –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    endpoint = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    if not endpoint:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå Endpoint –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ Endpoint (IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞):",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_client")
                    ]])
                )
            except:
                pass
        return
    
    await state.update_data(endpoint=endpoint)
    
    if user_id in user_last_message:
        try:
            await message.bot.edit_message_text(
                chat_id=user_id,
                message_id=user_last_message[user_id],
                text=f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                     f"‚úÖ Endpoint: {endpoint}\n\n"
                     f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
                reply_markup=get_time_limit_keyboard()
            )
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@admin_router.callback_query(F.data.startswith("time_limit:"))
async def process_time_limit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    time_limit = callback.data.split(":", 1)[1]
    
    if time_limit == "custom":
        await edit_or_send_message(
            callback,
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Ä–æ–∫–∞:",
            reply_markup=get_custom_time_keyboard()
        )
        await callback.answer()
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    expires_at = None
    if time_limit != "unlimited":
        now = datetime.now()
        
        # –ß–∞—Å—ã
        if time_limit.endswith('h'):
            hours = int(time_limit[:-1])
            expires_at = now + timedelta(hours=hours)
        # –î–Ω–∏
        elif time_limit.endswith('d'):
            days = int(time_limit[:-1])
            expires_at = now + timedelta(days=days)
        # –ù–µ–¥–µ–ª–∏  
        elif time_limit.endswith('w'):
            weeks = int(time_limit[:-1])
            expires_at = now + timedelta(weeks=weeks)
        # –ú–µ—Å—è—Ü—ã
        elif time_limit.endswith('m'):
            months = int(time_limit[:-1])
            expires_at = now + timedelta(days=months * 30)
        # –ì–æ–¥—ã
        elif time_limit.endswith('y'):
            years = int(time_limit[:-1])
            expires_at = now + timedelta(days=years * 365)
    
    await state.update_data(expires_at=expires_at)
    
    expires_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if expires_at is None else expires_at.strftime('%d.%m.%Y %H:%M')
    await edit_or_send_message(
        callback,
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:",
        reply_markup=get_traffic_limit_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è custom –≤—Ä–µ–º–µ–Ω–∏
@admin_router.callback_query(F.data.startswith("custom_time_unit:"))
async def process_custom_time_unit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏"""
    time_unit = callback.data.split(":", 1)[1]
    await state.update_data(custom_time_unit=time_unit)
    
    unit_names = {
        'hours': '—á–∞—Å–æ–≤',
        'days': '–¥–Ω–µ–π', 
        'weeks': '–Ω–µ–¥–µ–ª—å',
        'months': '–º–µ—Å—è—Ü–µ–≤',
        'years': '–ª–µ—Ç'
    }
    
    await edit_or_send_message(
        callback,
        f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit_names.get(time_unit, time_unit)}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_client")
        ]])
    )
    await state.set_state(ClientStates.waiting_custom_time_value)
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
@admin_router.callback_query(F.data == "back_to_time_selection")
async def back_to_time_selection(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
    await edit_or_send_message(
        callback,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
        reply_markup=get_time_limit_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@admin_router.message(StateFilter(ClientStates.waiting_custom_time_value))
async def process_custom_time_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    try:
        value = int(message.text.strip())
        if value <= 0 or value > 1000:
            raise ValueError()
            
        data = await state.get_data()
        time_unit = data.get('custom_time_unit', 'days')
        
        now = datetime.now()
        expires_at = None
        
        if time_unit == 'hours':
            expires_at = now + timedelta(hours=value)
        elif time_unit == 'days':
            expires_at = now + timedelta(days=value)
        elif time_unit == 'weeks':
            expires_at = now + timedelta(weeks=value)
        elif time_unit == 'months':
            expires_at = now + timedelta(days=value * 30)
        elif time_unit == 'years':
            expires_at = now + timedelta(days=value * 365)
        
        await state.update_data(expires_at=expires_at)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—Ö–æ–º
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:",
                    reply_markup=get_traffic_limit_keyboard()
                )
            except:
                pass
                
    except ValueError:
        # –û—à–∏–±–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚è∞ –û—à–∏–±–∫–∞!\n\n"
                         "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 1000):",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_client")
                    ]])
                )
            except:
                pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞  
@admin_router.callback_query(F.data.startswith("traffic_limit:"))
async def process_traffic_limit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"""
    traffic_limit = callback.data.split(":", 1)[1]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
    traffic_limit_bytes = None
    if traffic_limit != "unlimited":
        gb_limit = int(traffic_limit) 
        traffic_limit_bytes = gb_limit * 1024 * 1024 * 1024
    
    await state.update_data(traffic_limit=traffic_limit_bytes)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    data = await state.get_data()
    name = data.get("name")
    endpoint = data.get("endpoint")
    expires_at = data.get("expires_at")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
        private_key, public_key, preshared_key = awg_manager.generate_keypair_with_preshared()
        
        ip_address = await awg_manager.get_next_available_ip()

        data = await state.get_data()

        ipv6_address = ""
        has_ipv6 = data.get("has_ipv6", False)

        if has_ipv6 and config.ipv6_enabled:
            ipv6_address = await awg_manager.get_next_available_ipv6()
            if not ipv6_address:
                await editor_send_message(
                    callback,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π IPv6-–∞–¥—Ä–µ—Å.\n\n"
                    "–ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —Å IPv4.",
                    reply_markup=get_clients_menu()
                )
                has_ipv6 = False

        if not ip_address:
            await edit_or_send_message(
                callback,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å",
                reply_markup=get_clients_menu()
            )
            await state.clear()
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(
            name=name,
            public_key=public_key,
            private_key=private_key,
            preshared_key=preshared_key,
            ip_address=ip_address,
            ipv6_address=ipv6_address,
            has_ipv6=has_ipv6,
            endpoint=endpoint,
            expires_at=expires_at,
            traffic_limit=traffic_limit,
            is_active=True,
            is_blocked=False
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        client_id = await db.add_client(client)
        client.id = client_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        success = await awg_manager.add_peer_to_server(client)
        
        if success:
            traffic_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if traffic_limit == "unlimited" else f"{traffic_limit} GB"
            expires_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if client.expires_at is None else client.expires_at.strftime('%d.%m.%Y %H:%M')
            
            ipv6_info = f"\nüåê IPv6: {client.ipv6_address}" if client.has_ipv6 and client.ipv6_address else ""

            await edit_or_send_message(
                callback,
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üë§ –ò–º—è: {client.name}\n"
                f"üì° IP: {client.ip_address}{ipv6_info}\n"
                f"üîê Preshared Key –¥–æ–±–∞–≤–ª–µ–Ω\n"
                f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_text}\n"
                f"üìä –¢—Ä–∞—Ñ–∏–∫: {traffic_text}\n\n"
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=get_client_details_keyboard(client.id)
            )

        else:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await db.delete_client(client_id)
            await edit_or_send_message(
                callback,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
                reply_markup=get_clients_menu()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await edit_or_send_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞",
            reply_markup=get_clients_menu()
        )
    
    await state.clear()
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data == "cancel_add_client")
async def cancel_add_client(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await state.clear()
    await edit_or_send_message(
        callback,
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_clients_menu()
    )
    await callback.answer()

# –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@admin_router.callback_query(F.data == "list_clients")
@admin_router.callback_query(F.data.startswith("clients_page:"))
async def show_clients_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = 0
    if callback.data.startswith("clients_page:"):
        page = int(callback.data.split(":", 1)[1])
    
    clients = await db.get_all_clients()
    if not clients:
        await edit_or_send_message(
            callback,
            "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_clients_menu()
        )
        await callback.answer()
        return
    
    per_page = 10
    total_pages = (len(clients) - 1) // per_page + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1
    
    await edit_or_send_message(
        callback,
        f"üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
        f"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}",
        reply_markup=get_client_list_keyboard(clients, page, per_page)
    )
    await callback.answer()

# –î–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç QR-–∫–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–∞—Ñ–∏–∫–∞
@admin_router.callback_query(F.data.startswith("client_details:"))
async def show_client_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await edit_or_send_message(
            callback,
            "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_clients_menu()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await awg_manager.get_interface_stats()
    client_stats = stats.get(client.public_key, {})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await update_client_traffic_usage(client, client_stats)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
    client = await db.get_client(client_id)
    
    info_text = format_client_info(client, client_stats)
    
    user_id = callback.from_user.id
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ (QR-–∫–æ–¥), —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        if callback.message and callback.message.photo:
            await callback.bot.delete_message(
                chat_id=user_id,
                message_id=callback.message.message_id
            )
            new_message = await callback.bot.send_message(
                chat_id=user_id,
                text=info_text,
                reply_markup=get_client_details_keyboard(client_id)
            )
            user_last_message[user_id] = new_message.message_id
        else:
            await edit_or_send_message(
                callback,
                info_text,
                reply_markup=get_client_details_keyboard(client_id)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç QR: {e}")
        new_message = await callback.bot.send_message(
            chat_id=user_id,
            text=info_text,
            reply_markup=get_client_details_keyboard(client_id)
        )
        user_last_message[user_id] = new_message.message_id
    
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("edit_client:"))
async def show_edit_client_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    await edit_or_send_message(
        callback,
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {client.name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_client_keyboard(client_id)
    )
    await callback.answer()

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("toggle_block:"))
async def toggle_client_block(callback: CallbackQuery):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    client.is_blocked = not client.is_blocked
    
    if client.is_blocked:
        # –ë–ª–æ–∫–∏—Ä—É–µ–º - —É–¥–∞–ª—è–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
        success = await awg_manager.remove_peer_from_server(client.public_key)
        action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    else:
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä  
        success = await awg_manager.add_peer_to_server(client)
        action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    if success:
        await db.update_client(client)
        await callback.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {action}", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        stats = await awg_manager.get_interface_stats()
        client_stats = stats.get(client.public_key, {})
        info_text = format_client_info(client, client_stats)
        
        await edit_or_send_message(
            callback,
            info_text,
            reply_markup=get_client_details_keyboard(client_id)
        )
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ - —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π .conf —Ñ–∞–π–ª–∞
@admin_router.callback_query(F.data.startswith("client_config:"))
async def send_client_config(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ñ–∞–π–ª–æ–º .conf"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    try:
        from utils.vpn_converter import conf_to_vpn_url
        from aiogram.types import BufferedInputFile
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_text = await awg_manager.create_client_config(client)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º vpn:// URL
        try:
            vpn_url = conf_to_vpn_url(config_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ vpn://: {e}")
            vpn_url = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ vpn:// —Å—Ç—Ä–æ–∫–∏"
        
        formatted_config = format_client_config(client.name, config_text)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        full_message = f"{formatted_config}\n\n" \
                      f"üîó VPN URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n" \
                      f"<pre>{vpn_url}</pre>"
        
        if user_id in user_last_message:
            try:
                await callback.bot.delete_message(
                    chat_id=user_id,
                    message_id=user_last_message[user_id]
                )
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        sent_message = await callback.bot.send_message(
            chat_id=user_id,
            text=full_message,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_last_message[user_id] = sent_message.message_id
        
        # –°–æ–∑–¥–∞–µ–º .conf —Ñ–∞–π–ª
        conf_filename = f"{client.name}.conf"
        conf_file = BufferedInputFile(
            file=config_text.encode('utf-8'),
            filename=conf_filename
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await callback.bot.send_document(
            chat_id=user_id,
            document=conf_file,
            caption=f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è {client.name}\n\n"
                   f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaWG",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É",
                    callback_data=f"back_from_config:{client_id}"
                )
            ]])
        )
        
        await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)


# –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("back_from_config:"))
async def back_from_config(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    try:
        await callback.message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: {e}")
    
    if user_id in user_last_message:
        try:
            await callback.bot.delete_message(
                chat_id=user_id,
                message_id=user_last_message[user_id]
            )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    stats = await awg_manager.get_interface_stats()
    client_stats = stats.get(client.public_key, {})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    await update_client_traffic_usage(client, client_stats)
    
    client_info = format_client_info(client, client_stats)
    
    new_message = await callback.bot.send_message(
        chat_id=user_id,
        text=client_info,
        reply_markup=get_client_details_keyboard(client.id),
        parse_mode="Markdown"
    )
    
    user_last_message[user_id] = new_message.message_id
    await callback.answer()

# QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
@admin_router.callback_query(F.data.startswith("client_qr:"))
async def send_client_qr(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        config_text = await awg_manager.create_client_config(client)
        qr_image = generate_qr_code(config_text)
        
        user_id = callback.from_user.id
        
        if user_id in user_last_message:
            try:
                await callback.bot.delete_message(
                    chat_id=user_id,
                    message_id=user_last_message[user_id]
                )
            except:
                pass
        
        new_message = await callback.bot.send_photo(
            chat_id=user_id,
            photo=qr_image,
            caption=f"üì± QR-–∫–æ–¥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.name}\n\n"
                   "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ AmneziaWG",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )
        user_last_message[user_id] = new_message.message_id
        
        await callback.answer("‚úÖ QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ QR-–∫–æ–¥–∞
@admin_router.callback_query(F.data.startswith("back_from_qr:"))
async def back_from_qr(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ QR-–∫–æ–¥–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
    callback.data = f"client_details:{client_id}"
    await show_client_details(callback)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –∏–∑ awg show
@admin_router.callback_query(F.data.startswith("client_ip_info:"))
async def show_client_ip_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö...")
    
    stats = await awg_manager.get_interface_stats()
    
    today_connections = await db.get_client_daily_ips(client_id)
    
    info_text = f"üåç IP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client.name}\n\n"
    
    current_endpoint = None
    client_stats = stats.get(client.public_key, {})
    if 'endpoint' in client_stats and client_stats['endpoint']:
        current_endpoint = client_stats['endpoint'].split(':')[0]
        
        current_ip_info = await ip_service.get_ip_info(current_endpoint)
        if current_ip_info:
            info_text += f"üî¥ –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω —Å IP: {current_endpoint}\n"
            info_text += f"   üìç {current_ip_info['country']}, {current_ip_info['city']}\n"
            info_text += f"   üåê {current_ip_info['isp']}\n\n"
        else:
            info_text += f"üî¥ –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–µ–Ω —Å IP: {current_endpoint}\n\n"
    
    if not today_connections:
        if not current_endpoint:
            info_text += f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}) –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ"
        else:
            info_text += f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}) –¥—Ä—É–≥–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ"
    else:
        info_text += f"üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):\n\n"
        
        unique_ips = []
        seen_ips = set()
        
        for connection in today_connections:
            ip = connection['ip_address']
            if (current_endpoint and ip == current_endpoint) or ip in seen_ips:
                continue
            seen_ips.add(ip)
            unique_ips.append(connection)
        
        if not unique_ips:
            info_text += "–î—Ä—É–≥–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ"
        else:
            for i, connection in enumerate(unique_ips[:7], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 7 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP
                ip = connection['ip_address']
                count = connection['connection_count']
                last_time = connection['last_seen'].strftime('%H:%M')
                
                ip_info = await ip_service.get_ip_info(ip)
                
                if ip_info:
                    info_text += f"{i}. üåê {ip}\n" \
                               f"   üìç {ip_info['country']}, {ip_info['city']}\n" \
                               f"   üè¢ {ip_info['isp']}\n" \
                               f"   üî¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n" \
                               f"   üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_time}\n\n"
                else:
                    info_text += f"{i}. üåê {ip}\n" \
                               f"   üî¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n" \
                               f"   üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_time}\n\n"
            
            remaining = len(unique_ips) - 7
            if remaining > 0:
                info_text += f"... –∏ –µ—â–µ {remaining} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP"
    
    await edit_or_send_message(
        callback,
        info_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"client_ip_info:{client_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"client_details:{client_id}")
        ]])
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("client_stats:"))
async def show_client_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    stats = await awg_manager.get_interface_stats()
    client_stats = stats.get(client.public_key, {})
    
    if not client_stats:
        stats_text = f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client.name}\n\n‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    else:
        rx_bytes = client_stats.get('transfer', '0 B, 0 B').split(', ')[0]
        tx_bytes = client_stats.get('transfer', '0 B, 0 B').split(', ')[1]
        last_handshake = client_stats.get('latest handshake', '–ù–∏–∫–æ–≥–¥–∞')
        
        stats_text = f"""üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client.name}

üì• –ü–æ–ª—É—á–µ–Ω–æ: {rx_bytes}
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tx_bytes}  
ü§ù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {last_handshake}\n
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {format_traffic_size(client.traffic_used)}
üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: {'–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' if not client.traffic_limit or client.traffic_limit == 'unlimited' else format_traffic_size(client.traffic_limit)}"""
    
    await edit_or_send_message(
        callback,
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"client_stats:{client_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"client_details:{client_id}")
        ]])
    )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("delete_client:"))
async def confirm_delete_client(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await edit_or_send_message(
        callback,
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.name}?\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirmation_keyboard("delete_client", str(client_id))
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("confirm:delete_client:"))
async def delete_client_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    client_id = int(callback.data.split(":", 2)[2])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        await awg_manager.remove_peer_from_server(client.public_key)
        
        success = await db.delete_client(client_id)
        
        if success:
            await edit_or_send_message(
                callback,
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                reply_markup=get_clients_menu()
            )
            await callback.answer("‚úÖ –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞", show_alert=True)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.callback_query(F.data.startswith("cancel:"))
async def cancel_action(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await edit_or_send_message(
        callback,
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_clients_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "stats_menu")
async def show_stats_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    clients = await db.get_all_clients()
    active_clients = [c for c in clients if c.is_active and not c.is_blocked]
    blocked_clients = [c for c in clients if c.is_blocked]
    
    stats = await awg_manager.get_interface_stats()
    online_clients = len([key for key in stats.keys() if "latest handshake" in stats[key]])
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    total_traffic_used = 0
    total_traffic_limit = 0
    clients_with_limit = 0
    
    for client in clients:
        # –°—É–º–º–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
        if client.traffic_used:
            total_traffic_used += client.traffic_used
        
        # –°—É–º–º–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º)
        if client.traffic_limit and client.traffic_limit != "unlimited":
            total_traffic_limit += client.traffic_limit
            clients_with_limit += 1
    
    try:
        network = ipaddress.IPv4Network(config.server_subnet)
        total_ips = network.num_addresses - 2
        available_ips = total_ips - len(clients)
    except:
        total_ips = available_ips = "‚Äî"
    
    current_time = datetime.now().strftime('%H:%M:%S')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
    traffic_used_formatted = format_traffic_size(total_traffic_used)
    traffic_limit_formatted = format_traffic_size(total_traffic_limit) if clients_with_limit > 0 else "‚Äî"
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        f"üïê –í—Ä–µ–º—è: {current_time}\n\n"
        f"üë• –ö–ª–∏–µ–Ω—Ç—ã:\n"
        f"‚îú üìã –í—Å–µ–≥–æ: {len(clients)}\n"
        f"‚îú ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_clients)}\n"
        f"‚îú üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(blocked_clients)}\n"
        f"‚îî üü¢ –û–Ω–ª–∞–π–Ω: {online_clients}\n\n"
        f"üåê IP-–∞–¥—Ä–µ—Å–∞:\n"
        f"‚îú üë§ –ó–∞–Ω—è—Ç–æ: {len(clients)} / {total_ips}\n"
        f"‚îî ‚ú® –î–æ—Å—Ç—É–ø–Ω–æ: {available_ips}\n\n"
        f"üìà –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞:\n"
        f"‚îú üì§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {traffic_used_formatted}\n"
        f"‚îî üéØ –õ–∏–º–∏—Ç: {traffic_limit_formatted}\n"
        f"   üí° ({clients_with_limit} –∫–ª–∏–µ–Ω—Ç{'–æ–≤' if clients_with_limit != 1 else ''})"
    )

    await edit_or_send_message(
        callback,
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_menu")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    await callback.answer()

# –ú–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
@admin_router.callback_query(F.data == "backup_menu")
async def show_backup_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    backups = await backup_service.list_backups()
    
    await edit_or_send_message(
        callback,
        f"üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ø–∏–π: {len(backups)}",
        reply_markup=get_backup_menu()
    )
    await callback.answer()

# –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data == "search_client")
async def start_search_client(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
    await edit_or_send_message(
        callback,
        "üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
        ]])
    )
    await state.set_state(ClientStates.waiting_client_search)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.message(StateFilter(ClientStates.waiting_client_search))
async def process_search_client(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    search_term = message.text.strip().lower()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    if not search_term:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
                    ]])
                )
            except:
                pass
        return
    
    all_clients = await db.get_all_clients()
    found_clients = [c for c in all_clients if search_term in c.name.lower()]
    
    await state.clear()
    
    if not found_clients:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         f"‚ùå –ö–ª–∏–µ–Ω—Ç—ã —Å –∏–º–µ–Ω–µ–º '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="clients_menu")
                    ]])
                )
            except:
                pass
    else:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n\n"
                         f"–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(found_clients)}",
                    reply_markup=get_client_list_keyboard(found_clients, 0, 10)
                )
            except:
                pass

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("edit_name:"))
async def edit_client_name(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_client_id=client_id)
    await edit_or_send_message(
        callback,
        f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {client.name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–∏–º–≤–æ–ª—ã - _ .):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
        ]])
    )
    await state.set_state(EditClientStates.waiting_new_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@admin_router.message(StateFilter(EditClientStates.waiting_new_name))
async def process_new_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    new_name = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    client_id = data.get('edit_client_id')
    client = await db.get_client(client_id)
    
    if not new_name or len(new_name) < 2 or len(new_name) > 32:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
                    ]])
                )
            except:
                pass
        return
    
    if not new_name.replace('-', '').replace('_', '').replace('.', '').isalnum():
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã - _ .\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
                    ]])
                )
            except:
                pass
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    existing_client = await db.get_client_by_name(new_name)
    if existing_client and existing_client.id != client_id:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
                    ]])
                )
            except:
                pass
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    old_name = client.name
    client.name = new_name
    success = await db.update_client(client)
    
    await state.clear()
    
    if success:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ\n\n"
                         f"–°—Ç–∞—Ä–æ–µ –∏–º—è: {old_name}\n"
                         f"–ù–æ–≤–æ–µ –∏–º—è: {new_name}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                    ]])
                )
            except:
                pass
    else:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                    ]])
                )
            except:
                pass

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint
@admin_router.callback_query(F.data.startswith("edit_endpoint:"))
async def edit_client_endpoint(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_client_id=client_id)
    await edit_or_send_message(
        callback,
        f"üì° –ò–∑–º–µ–Ω–µ–Ω–∏–µ Endpoint –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π Endpoint: {client.endpoint}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
        ]])
    )
    await state.set_state(EditClientStates.waiting_new_endpoint)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ endpoint
@admin_router.message(StateFilter(EditClientStates.waiting_new_endpoint))
async def process_new_client_endpoint(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ endpoint –∫–ª–∏–µ–Ω—Ç–∞"""
    new_endpoint = message.text.strip()
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    client_id = data.get('edit_client_id')
    client = await db.get_client(client_id)
    
    if not new_endpoint:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="üì° –ò–∑–º–µ–Ω–µ–Ω–∏–µ Endpoint –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                         "‚ùå Endpoint –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
                    ]])
                )
            except:
                pass
        return
    
    old_endpoint = client.endpoint
    client.endpoint = new_endpoint
    success = await db.update_client(client)
    
    await state.clear()
    
    if success:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text=f"‚úÖ Endpoint –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω\n\n"
                         f"–°—Ç–∞—Ä—ã–π Endpoint: {old_endpoint}\n"
                         f"–ù–æ–≤—ã–π Endpoint: {new_endpoint}\n\n"
                         f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                    ]])
                )
            except:
                pass
    else:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Endpoint –∫–ª–∏–µ–Ω—Ç–∞",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                    ]])
                )
            except:
                pass

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("edit_expiry:"))
async def edit_client_expiry(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_client_id=client_id)
    
    expiry_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if client.expires_at is None else client.expires_at.strftime('%d.%m.%Y %H:%M')
    
    await edit_or_send_message(
        callback,
        f"‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: {expiry_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_time_limit_keyboard_for_edit(client_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.callback_query(F.data.startswith("edit_time_limit:"))
async def process_edit_time_limit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    parts = callback.data.split(":", 2)
    client_id = int(parts[1])
    time_limit = parts[2]
    
    client = await db.get_client(client_id)
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if time_limit == "custom":
        await state.update_data(edit_client_id=client_id)
        await edit_or_send_message(
            callback,
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ —Å—Ä–æ–∫–∞:",
            reply_markup=get_custom_time_keyboard_for_edit(client_id)
        )
        await callback.answer()
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    expires_at = None
    if time_limit != "unlimited":
        now = datetime.now()
        
        if time_limit.endswith('h'):
            hours = int(time_limit[:-1])
            expires_at = now + timedelta(hours=hours)
        elif time_limit.endswith('d'):
            days = int(time_limit[:-1])
            expires_at = now + timedelta(days=days)
        elif time_limit.endswith('w'):
            weeks = int(time_limit[:-1])
            expires_at = now + timedelta(weeks=weeks)
        elif time_limit.endswith('m'):
            months = int(time_limit[:-1])
            expires_at = now + timedelta(days=months * 30)
        elif time_limit.endswith('y'):
            years = int(time_limit[:-1])
            expires_at = now + timedelta(days=years * 365)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    old_expiry = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if client.expires_at is None else client.expires_at.strftime('%d.%m.%Y %H:%M')
    client.expires_at = expires_at
    success = await db.update_client(client)
    
    if success:
        new_expiry = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if expires_at is None else expires_at.strftime('%d.%m.%Y %H:%M')
        await edit_or_send_message(
            callback,
            f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
            f"–°—Ç–∞—Ä—ã–π —Å—Ä–æ–∫: {old_expiry}\n"
            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_expiry}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )
    else:
        await edit_or_send_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(F.data.startswith("edit_custom_time_unit:"))
async def process_edit_custom_time_unit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parts = callback.data.split(":", 2)
    client_id = int(parts[1])
    time_unit = parts[2]
    
    await state.update_data(edit_client_id=client_id, custom_time_unit=time_unit)
    
    unit_names = {
        'hours': '—á–∞—Å–æ–≤',
        'days': '–¥–Ω–µ–π',
        'weeks': '–Ω–µ–¥–µ–ª—å',
        'months': '–º–µ—Å—è—Ü–µ–≤',
        'years': '–ª–µ—Ç'
    }
    
    await edit_or_send_message(
        callback,
        f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {unit_names.get(time_unit, time_unit)}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_client:{client_id}")
        ]])
    )
    
    await state.set_state(EditClientStates.waiting_edit_time_value)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.message(StateFilter(EditClientStates.waiting_edit_time_value))
async def process_edit_custom_time_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    try:
        await message.delete()
    except:
        pass
    
    try:
        value = int(message.text.strip())
        if value <= 0 or value > 1000:
            raise ValueError()
        
        data = await state.get_data()
        client_id = data.get('edit_client_id')
        time_unit = data.get('custom_time_unit', 'days')
        
        client = await db.get_client(client_id)
        if not client:
            if user_id in user_last_message:
                try:
                    await message.bot.edit_message_text(
                        chat_id=user_id,
                        message_id=user_last_message[user_id],
                        text="‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="üîô –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="clients_menu")
                        ]])
                    )
                except:
                    pass
            await state.clear()
            return
        
        now = datetime.now()
        expires_at = None
        
        if time_unit == 'hours':
            expires_at = now + timedelta(hours=value)
        elif time_unit == 'days':
            expires_at = now + timedelta(days=value)
        elif time_unit == 'weeks':
            expires_at = now + timedelta(weeks=value)
        elif time_unit == 'months':
            expires_at = now + timedelta(days=value * 30)
        elif time_unit == 'years':
            expires_at = now + timedelta(days=value * 365)
        
        old_expiry = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if client.expires_at is None else client.expires_at.strftime('%d.%m.%Y %H:%M')
        client.expires_at = expires_at
        success = await db.update_client(client)
        
        await state.clear()
        
        if success:
            if user_id in user_last_message:
                try:
                    await message.bot.edit_message_text(
                        chat_id=user_id,
                        message_id=user_last_message[user_id],
                        text=f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω\n\n"
                             f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
                             f"–°—Ç–∞—Ä—ã–π —Å—Ä–æ–∫: {old_expiry}\n"
                             f"–ù–æ–≤—ã–π —Å—Ä–æ–∫: {expires_at.strftime('%d.%m.%Y %H:%M')}",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                        ]])
                    )
                except:
                    pass
        else:
            if user_id in user_last_message:
                try:
                    await message.bot.edit_message_text(
                        chat_id=user_id,
                        message_id=user_last_message[user_id],
                        text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                        ]])
                    )
                except:
                    pass
    
    except ValueError:
        if user_id in user_last_message:
            try:
                await message.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=user_last_message[user_id],
                    text="‚è∞ –û—à–∏–±–∫–∞!\n\n"
                         "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 1000):",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="clients_menu")
                    ]])
                )
            except:
                pass

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
@admin_router.callback_query(F.data.startswith("edit_traffic_limit:"))
async def edit_client_traffic(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_client_id=client_id)
    
    traffic_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    if client.traffic_limit and client.traffic_limit != "unlimited":
        traffic_gb = client.traffic_limit / (1024 * 1024 * 1024)
        traffic_text = f"{traffic_gb:.0f} GB"
    
    await edit_or_send_message(
        callback,
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {traffic_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:",
        reply_markup=get_traffic_limit_keyboard_for_edit(client_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
@admin_router.callback_query(F.data.startswith("edit_traffic_value:"))
async def process_edit_traffic_limit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    parts = callback.data.split(":", 2)
    client_id = int(parts[1])
    traffic_limit = parts[2]
    
    client = await db.get_client(client_id)
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
    traffic_limit_bytes = None
    if traffic_limit != "unlimited":
        gb_limit = int(traffic_limit)
        traffic_limit_bytes = gb_limit * 1024 * 1024 * 1024
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    old_traffic = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    if client.traffic_limit and client.traffic_limit != "unlimited":
        old_traffic_gb = client.traffic_limit / (1024 * 1024 * 1024)
        old_traffic = f"{old_traffic_gb:.0f} GB"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client.traffic_limit = traffic_limit_bytes
    success = await db.update_client(client)
    
    await state.clear()
    
    if success:
        new_traffic = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" if traffic_limit == "unlimited" else f"{traffic_limit} GB"
        await edit_or_send_message(
            callback,
            f"‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
            f"–°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: {old_traffic}\n"
            f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_traffic}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )
    else:
        await edit_or_send_message(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )
    
    await callback.answer()

# –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
@admin_router.callback_query(F.data.startswith("regenerate_keys:"))
async def confirm_regenerate_keys(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await edit_or_send_message(
        callback,
        f"üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.name}?\n\n"
        f"‚ö†Ô∏è –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
        f"‚Ä¢ –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n"
        f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω\n"
        f"‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_regenerate:{client_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"edit_client:{client_id}")
        ]])
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
@admin_router.callback_query(F.data.startswith("confirm_regenerate:"))
async def regenerate_client_keys(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split(":", 1)[1])
    client = await db.get_client(client_id)
    
    if not client:
        await callback.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏...")
    
    try:
        await awg_manager.remove_peer_from_server(client.public_key)
        
        new_private_key, new_public_key = awg_manager.generate_keypair()
        
        client.private_key = new_private_key
        client.public_key = new_public_key
        success = await db.update_client(client)
        
        if success:
            if not client.is_blocked:
                await awg_manager.add_peer_to_server(client)
            
            await edit_or_send_message(
                callback,
                f"‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.name}\n"
                f"üîë –ù–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {new_public_key[:20]}...\n\n"
                f"‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
                f"–í—ã–¥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üì± QR-–∫–æ–¥", callback_data=f"client_qr:{client_id}"),
                    InlineKeyboardButton(text="üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data=f"client_config:{client_id}")
                ], [
                    InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                ]])
            )
        else:
            await edit_or_send_message(
                callback,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
                ]])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {e}")
        await edit_or_send_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"client_details:{client_id}")
            ]])
        )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@admin_router.callback_query(F.data == "create_backup")
async def create_backup(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    await callback.answer("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
    
    try:
        backup_filename = await backup_service.create_backup()
        if backup_filename:
            await edit_or_send_message(
                callback,
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üì¶ –§–∞–π–ª: {backup_filename}\n" 
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_backup_menu()
            )
        else:
            await edit_or_send_message(
                callback,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                reply_markup=get_backup_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await edit_or_send_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
            reply_markup=get_backup_menu()
        )

# –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
@admin_router.callback_query(F.data == "list_backups")
async def list_backups(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    backups = await backup_service.list_backups() 
    
    if not backups:
        await edit_or_send_message(
            callback,
            "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π\n\n"
            "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=get_backup_menu()
        )
    else:
        await edit_or_send_message(
            callback,
            f"üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ø–∏–π: {len(backups)}",
            reply_markup=get_backup_list_keyboard(backups)
        )
    await callback.answer()

# –î–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@admin_router.callback_query(F.data.startswith("backup_details:"))
async def show_backup_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_filename = callback.data.split(":", 1)[1]
    backups = await backup_service.list_backups()
    
    backup_info = None
    for backup in backups:
        if backup['filename'] == backup_filename:
            backup_info = backup
            break
    
    if not backup_info:
        await edit_or_send_message(
            callback,
            "‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=get_backup_menu()
        )
        await callback.answer()
        return
    
    size_str = backup_service.format_backup_size(backup_info['size'])
    created_str = backup_info['created_at'].strftime('%d.%m.%Y %H:%M')
    
    await edit_or_send_message(
        callback,
        f"üì¶ –î–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n\n"
        f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {backup_filename}\n"
        f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_str}",
        reply_markup=get_backup_details_keyboard(backup_filename)
    )
    await callback.answer()

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@admin_router.callback_query(F.data.startswith("restore_backup:"))
async def restore_backup_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_filename = callback.data.split(":", 1)[1]
    
    await edit_or_send_message(
        callback,
        f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n"
        f"{backup_filename}\n\n"
        f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n"
        f"‚Ä¢ –í—Å–µ —Ç–µ–∫—É—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã\n"
        f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_restore:{backup_filename}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"backup_details:{backup_filename}")
        ]])
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("confirm_restore:"))
async def confirm_restore_backup(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_filename = callback.data.split(":", 1)[1]
    
    await callback.answer("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
    
    try:
        success = await backup_service.restore_backup(backup_filename)
        if success:
            await edit_or_send_message(
                callback,
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üì¶ –§–∞–π–ª: {backup_filename}\n"
                f"üìÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ AWG —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                reply_markup=get_backup_menu()
            )
        else:
            await edit_or_send_message(
                callback,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                reply_markup=get_backup_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await edit_or_send_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
            reply_markup=get_backup_menu()
        )

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@admin_router.callback_query(F.data.startswith("delete_backup:"))
async def delete_backup_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_filename = callback.data.split(":", 1)[1]
    
    await edit_or_send_message(
        callback,
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏\n\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n"
        f"{backup_filename}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_backup:{backup_filename}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"backup_details:{backup_filename}")
        ]])
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
@admin_router.callback_query(F.data.startswith("confirm_delete_backup:"))
async def confirm_delete_backup(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    backup_filename = callback.data.split(":", 1)[1]
    
    try:
        success = await backup_service.delete_backup(backup_filename)
        if success:
            await edit_or_send_message(
                callback,
                f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"üì¶ –§–∞–π–ª: {backup_filename}",
                reply_markup=get_backup_menu()
            )
        else:
            await edit_or_send_message(
                callback,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                reply_markup=get_backup_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await edit_or_send_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
            reply_markup=get_backup_menu()
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@admin_router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()