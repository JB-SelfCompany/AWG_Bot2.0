from datetime import datetime
from typing import Dict, Any, Optional
from database.database import Client


def format_client_info(client: Client, stats: Optional[Dict[str, Any]] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    
    # –°—Ç–∞—Ç—É—Å
    if client.is_blocked:
        status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    elif not client.is_active:
        status = "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    else:
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    is_connected = stats is not None and len(stats) > 0
    connection_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_connected else "‚ö™ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    
    # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    expires_text = "‚ôæÔ∏è –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    if client.expires_at:
        expires_text = client.expires_at.strftime('%d.%m.%Y %H:%M')
        if client.expires_at < datetime.now():
            expires_text += " ‚ùå –ò—Å—Ç–µ–∫"
    
    # –¢—Ä–∞—Ñ–∏–∫
    traffic_limit_text = "‚ôæÔ∏è –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    if client.traffic_limit:
        traffic_limit_text = format_traffic_size(client.traffic_limit)
        used_percent = (client.traffic_used / client.traffic_limit * 100) if client.traffic_limit > 0 else 0
        if used_percent >= 100:
            traffic_limit_text += " ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    transfer_info = ""
    last_handshake = ""
    
    if stats:
        transfer = stats.get('transfer', '0 B, 0 B')
        rx_bytes, tx_bytes = transfer.split(', ')
        transfer_info = f"\nüì• –ü–æ–ª—É—á–µ–Ω–æ: {rx_bytes}\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tx_bytes}"
        
        handshake = stats.get('latest handshake', '–ù–∏–∫–æ–≥–¥–∞')
        last_handshake = f"\nü§ù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {handshake}"
    
    info_text = f"""üë§ <b>–ö–ª–∏–µ–Ω—Ç: {client.name}</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
üåê <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b> {connection_status}
üì± <b>IP-–∞–¥—Ä–µ—Å:</b> {client.ip_address}

‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_text}
üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b> {format_traffic_size(client.traffic_used)} / {traffic_limit_text}

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {client.created_at.strftime('%d.%m.%Y %H:%M') if client.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}{transfer_info}{last_handshake}
"""
    
    return info_text


def format_client_config(client_name: str, config_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    return f"""üìÑ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {client_name}</b>

<pre>{config_text}</pre>

üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .conf
üì± –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ AmneziaVPN
"""


def format_traffic_size(bytes_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    if bytes_count == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0
    size = float(bytes_count)
    
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.2f} {units[unit_index]}"


def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"


def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    return dt.strftime('%d.%m.%Y %H:%M')


def format_date(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã"""
    return dt.strftime('%d.%m.%Y')


def format_time(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return dt.strftime('%H:%M')


def truncate_text(text: str, max_length: int = 30) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏—è"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def format_boolean(value: bool, true_text: str = "–î–∞", false_text: str = "–ù–µ—Ç") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    return true_text if value else false_text


def format_percentage(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    return f"{value:.1f}%"


def format_ip_with_mask(ip: str, mask: int = 32) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IP —Å –º–∞—Å–∫–æ–π"""
    return f"{ip}/{mask}"
